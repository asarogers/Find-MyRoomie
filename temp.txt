import React from 'react';
import { Star, Quote } from 'lucide-react';

const testimonials = [
  {
    name: "Sarah M.",
    age: 24,
    location: "Austin, TX",
    quote: "Finally a roommate app that doesn't feel sketchy. The verification system actually works and I found my perfect roommate in 2 weeks!",
    rating: 5,
  },
  {
    name: "Jake L.",
    age: 27,
    location: "Denver, CO",
    quote: "Being able to draw my zone and find real listings is a game changer. No more fake apartments or broken location filters.",
    rating: 5,
  },
  {
    name: "Maya P.",
    age: 22,
    location: "Seattle, WA",
    quote: "I used to be scared of scams—this felt like Airbnb + Hinge for roommates. The vibe matching actually works!",
    rating: 5,
  },
];

export default function Testimonials() {
  return (
    <section className="py-20 bg-gradient-to-b from-gray-50 to-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold text-gray-900 mb-4">
            What our early users are saying
          </h2>
          <p className="text-xl text-gray-600">
            Real stories from real people who found their perfect roommates
          </p>
        </div>

        <div className="grid md:grid-cols-3 gap-8">
          {testimonials.map((testimonial, index) => (
            <div
              key={index}
              className="bg-white rounded-2xl p-8 shadow-lg hover:shadow-xl transition-shadow relative"
            >
              <Quote className="w-8 h-8 text-teal-500 mb-4" />
              
              <div className="flex mb-4">
                {[...Array(testimonial.rating)].map((_, i) => (
                  <Star key={i} className="w-5 h-5 text-yellow-400 fill-current" />
                ))}
              </div>

              <blockquote className="text-gray-700 leading-relaxed mb-6">
                "{testimonial.quote}"
              </blockquote>

              <div className="flex items-center">
                <div className="w-12 h-12 bg-gradient-to-r from-teal-400 to-cyan-400 rounded-full flex items-center justify-center mr-4">
                  <span className="text-white font-bold text-lg">
                    {testimonial.name.charAt(0)}
                  </span>
                </div>
                <div>
                  <p className="font-semibold text-gray-900">{testimonial.name}</p>
                  <p className="text-sm text-gray-500">
                    Age {testimonial.age} • {testimonial.location}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}import {
    MapPin,
    Users,
    Home,
    Zap,
    Search,
    CheckCircle,
    Shield,
    Filter,
    MessageCircle,
    RefreshCw,
  } from "lucide-react";
  
  // Features Section
  export const features = [
    {
      icon: <MapPin className="w-8 h-8" />,
      title: "Draw Your Zone",
      description:
        "Select your exact living area using intuitive touch gestures on our interactive map.",
      color: "from-blue-500 to-cyan-500",
    },
    {
      icon: <Users className="w-8 h-8" />,
      title: "Match by Vibe",
      description:
        "Find compatible roommates based on lifestyle preferences, values, and daily routines.",
      color: "from-purple-500 to-pink-500",
    },
    {
      icon: <Home className="w-8 h-8" />,
      title: "Group Applications",
      description:
        "Apply together and split costs easily with built-in group coordination tools.",
      color: "from-green-500 to-teal-500",
    },
    {
      icon: <Zap className="w-8 h-8" />,
      title: "Instant Matching",
      description:
        "Get matched instantly with AI-powered compatibility scoring and real-time notifications.",
      color: "from-orange-500 to-red-500",
    },
  ];
  
  // How It Works Steps
  export const steps = [
    {
      icon: <Search className="w-12 h-12" />,
      title: "Draw Your Zone",
      description:
        "Use our interactive map to draw your ideal living area and set your preferences.",
    },
    {
      icon: <Users className="w-12 h-12" />,
      title: "Get Matched",
      description:
        "Our AI connects you with compatible roommates and available apartments in your zone.",
    },
    {
      icon: <CheckCircle className="w-12 h-12" />,
      title: "Apply Together",
      description:
        "Submit applications in one click, alone or with your matched group.",
    },
  ];
  
  // Pain Points Section
  export const painPoints = [
    {
      icon: <Shield className="w-6 h-6" />,
      problem: "90% Fake Profiles",
      solution: "Verified users & background checks keep it real",
      color: "text-red-600",
      impact: "Save $2,400 avg. scam loss",
    },
    {
      icon: <Filter className="w-6 h-6" />,
      problem: "Filters Don't Work",
      solution: "AI-powered filtering & dealbreaker logic that actually works",
      color: "text-orange-600",
      impact: "Save 120+ hours searching",
    },
    {
      icon: <MessageCircle className="w-6 h-6" />,
      problem: "Paywalls to Message",
      solution: "Always-free matching & messaging for everyone",
      color: "text-purple-600",
      impact: "Save $360/year in fees",
    },
    {
      icon: <RefreshCw className="w-6 h-6" />,
      problem: "Outdated Listings",
      solution: "Real-time partner apartment inventory that's always fresh",
      color: "text-blue-600",
      impact: "Avoid dead-end searches",
    },
  ];
  
  // Testimonials Section
  export const testimonials = [
    {
      name: "Sarah M.",
      role: "Marketing Manager, Chicago",
      quote:
        "Found my perfect roommate in just 3 days after months of searching elsewhere. The AI matching is incredibly accurate.",
      rating: 5,
    },
    {
      name: "Mike R.",
      role: "Software Engineer, Austin",
      quote:
        "The group application feature saved us so much time. We applied to 12 places in one afternoon and got approved for our top choice.",
      rating: 5,
    },
    {
      name: "Jessica L.",
      role: "Graduate Student, Boston",
      quote:
        "I was skeptical about online roommate finding, but the verification process here made me feel completely safe.",
      rating: 5,
    },
  ];
  
  // Guarantees Section
  export const guarantees = [
    {
      icon: <CheckCircle className="w-6 h-6 text-green-600" />,
      title: "7-Day Match Promise",
      description:
        "Find compatible matches within a week, or we'll personally help you find options.",
    },
    {
      icon: <Shield className="w-6 h-6 text-blue-600" />,
      title: "100% Verified Profiles",
      description:
        "Every user goes through identity verification and background screening.",
    },
    {
      icon: <MessageCircle className="w-6 h-6 text-purple-600" />,
      title: "Always Free Core Features",
      description:
        "Matching, messaging, and basic features remain free forever.",
    },
  ];
  import React, { useEffect, useState } from "react";
import { Box, Typography, Divider } from "@mui/material";

export default function BlogSidebar({ sections }: { sections: string[] }) {
  const [activeSection, setActiveSection] = useState("");

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        // Find all currently intersecting entries
        const intersecting = entries.filter(entry => entry.isIntersecting);
        
        if (intersecting.length > 0) {
          // Sort by their position from top of viewport
          intersecting.sort((a, b) => {
            return a.boundingClientRect.top - b.boundingClientRect.top;
          });
          
          // Set the topmost intersecting section as active
          const topSection = intersecting[0];
          setActiveSection(topSection.target.id);
        }
      },
      { 
        threshold: 0.1, // Trigger when 10% of the element is visible
        rootMargin: "-100px 0px -50% 0px" // Adjust detection zone
      }
    );

    // Also add a scroll listener as backup for more precise tracking
    const handleScroll = () => {
      const scrollPosition = window.scrollY + 150; // Offset for better UX
      
      for (let i = sections.length - 1; i >= 0; i--) {
        const id = sections[i].replace(/\s+/g, "-").toLowerCase();
        const element = document.getElementById(id);
        
        if (element && element.offsetTop <= scrollPosition) {
          setActiveSection(id);
          break;
        }
      }
    };

    sections.forEach((section) => {
      const id = section.replace(/\s+/g, "-").toLowerCase();
      const el = document.getElementById(id);
      if (el) observer.observe(el);
    });

    // Add scroll listener
    window.addEventListener('scroll', handleScroll, { passive: true });
    
    // Initial check
    handleScroll();

    return () => {
      observer.disconnect();
      window.removeEventListener('scroll', handleScroll);
    };
  }, [sections]);

  const scrollToSection = (id: string) => {
    const el = document.getElementById(id);
    if (el) {
      const y = el.getBoundingClientRect().top + window.scrollY - 100;
      window.scrollTo({ top: y, behavior: "smooth" });
    }
  };

  return (
    <Box
      sx={{
        position: "sticky",
        top: "32px",
        backgroundColor: "white",
        border: "1px solid #e0e0e0",
        borderRadius: "12px",
        boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
        p: 3,
        width: "100%",
        maxWidth: "280px",
        maxHeight: "calc(100vh - 64px)",
        overflowY: "auto",
      }}
    >
      <Typography 
        variant="h6" 
        fontWeight="bold" 
        mb={2}
        sx={{ color: "#1976d2" }}
      >
        📋 Table of Contents
      </Typography>
      
      <Box sx={{ mb: 2 }}>
        {sections.map((title, i) => {
          const id = title.replace(/\s+/g, "-").toLowerCase();
          const isActive = activeSection === id;
          
          return (
            <Typography
              key={i}
              onClick={() => scrollToSection(id)}
              sx={{
                cursor: "pointer",
                mb: 1.5,
                py: 0.5,
                px: 1,
                borderRadius: "6px",
                fontSize: "0.875rem",
                fontWeight: isActive ? "600" : "400",
                color: isActive ? "#1976d2" : "#555",
                backgroundColor: isActive ? "#e3f2fd" : "transparent",
                transition: "all 0.2s ease",
                "&:hover": { 
                  color: "#1976d2",
                  backgroundColor: "#f5f5f5"
                },
                borderLeft: isActive ? "3px solid #1976d2" : "3px solid transparent",
                marginLeft: "-4px",
                paddingLeft: "8px"
              }}
            >
              {title}
            </Typography>
          );
        })}
      </Box>
      
      <Divider sx={{ my: 2 }} />
      
      <Typography 
        variant="caption" 
        sx={{ 
          color: "#777",
          fontStyle: "italic",
          display: "block",
          textAlign: "center"
        }}
      >
        💬 More articles coming soon
      </Typography>
    </Box>
  );
}import React, { useEffect } from "react"
import AOS from "aos";
import "aos/dist/aos.css";

import { motion } from "framer-motion"
import { painPoints } from "./Data"

interface PainPointsProps {
  city?: string
}

export default function PainPoints({ city }: PainPointsProps) {
  useEffect(() => {
    AOS.init({ duration: 800 })
  }, [])

  const locationText = city ? ` in ${city}` : ""
  const heading = city
    ? `What's broken — and how we fix it${locationText}`
    : "What's broken — and how we fix it"
  const description = city
    ? `Discover why finding roommates${locationText} can be so challenging—and how our platform solves those pain points.`
    : "The average person wastes $11,000+ and 6 months searching for roommates. Here's how we change that."

  return (
    <section
      data-aos="fade-up"
      className="px-6 py-20 bg-gradient-to-br from-[#E4DDD2] to-[#D6CFC4]"
    >
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold mb-6">{heading}</h2>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            {description}
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {painPoints.map((point, index) => (
            <motion.div
              key={index}
              whileHover={{ scale: 1.02 }}
              className="group bg-white p-8 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 border border-gray-100"
              data-aos="fade-up"
              data-aos-delay={index * 100}
            >
              <div className="flex items-start space-x-4">
                <div
                  className={`p-3 rounded-xl bg-gradient-to-br ${
                    point.color === "text-red-600"
                      ? "from-red-100 to-red-200"
                      : point.color === "text-orange-600"
                      ? "from-orange-100 to-orange-200"
                      : point.color === "text-purple-600"
                      ? "from-purple-100 to-purple-200"
                      : "from-blue-100 to-blue-200"
                  }`}
                >
                  {point.icon}
                </div>
                <div className="flex-1">
                  <h3
                    className={`text-xl font-bold mb-2 ${point.color} group-hover:scale-105 transition-transform`}
                  >
                    {point.problem}
                  </h3>
                  <p className="text-gray-700 leading-relaxed mb-3">
                    <span className="text-green-600 font-semibold">
                      Our solution:
                    </span>{" "}
                    {point.solution}
                  </p>
                  <div className="text-sm text-gray-500 font-medium bg-gray-50 px-3 py-1 rounded-full inline-block">
                    💰 {point.impact}
                  </div>
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  )
}
import React from "react"
import { MapPin, Shield, Award, Users } from "lucide-react"
import "aos/dist/aos.css"

interface SafetyProps {
  city?: string
}

export default function Safety({ city }: SafetyProps) {
  const locationText = city ? ` in ${city}` : ""
  return (
    <section className="px-6 py-20 bg-white">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold mb-6">
            Built for Safety & Trust{locationText}
          </h2>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            {`Your safety is our priority${locationText}. Multiple verification layers ensure authentic connections.`}
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div className="text-center p-8 bg-gradient-to-br from-blue-50 to-cyan-50 rounded-2xl">
            <Shield className="w-16 h-16 mx-auto mb-6 text-blue-600" />
            <h3 className="text-xl font-bold mb-4">Identity Verification</h3>
            <p className="text-gray-600">
              Government ID verification and background checks for all users.
            </p>
          </div>

          <div className="text-center p-8 bg-gradient-to-br from-green-50 to-teal-50 rounded-2xl">
            <Award className="w-16 h-16 mx-auto mb-6 text-green-600" />
            <h3 className="text-xl font-bold mb-4">Community Standards</h3>
            <p className="text-gray-600">
              Strict guidelines with 24/7 moderation and reporting to keep our community safe.
            </p>
          </div>

          <div className="text-center p-8 bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl">
            <Users className="w-16 h-16 mx-auto mb-6 text-purple-600" />
            <h3 className="text-xl font-bold mb-4">Smart Matching</h3>
            <p className="text-gray-600">
              AI-powered compatibility scoring prevents mismatched situations.
            </p>
          </div>
        </div>
      </div>
    </section>
  )
}
import React from "react"
import "aos/dist/aos.css"
import { motion } from "framer-motion"
import { steps } from "./Data"

interface HowItWorksProps {
  city?: string
}

export default function HowItWorks({ city }: HowItWorksProps) {
  const heading = city
    ? `How It Works${` in ${city}`}`
    : "How It Works"
  const description = city
    ? `Three simple steps to find your perfect roommate and apartment match in ${city}.`
    : "Three simple steps to find your perfect roommate and apartment match."

  return (
    <section
      id="howitworks"
      data-aos="fade-up"
      className="scroll-mt-24 px-6 py-20 bg-gradient-to-br from-[#E4DDD2] to-[#D6CFC4]"
    >
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold mb-6">{heading}</h2>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            {description}
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-12">
          {steps.map((step, index) => (
            <motion.div
              key={index}
              whileHover={{ scale: 1.03 }}
              className="text-center group"
              data-aos="fade-up"
              data-aos-delay={index * 150}
            >
              <div className="relative mb-8">
                <div className="w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4 text-white group-hover:scale-110 transition-transform duration-300 shadow-2xl">
                  {step.icon}
                </div>
                <div className="absolute -top-2 -right-2 w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-lg border-2 border-gray-200 text-sm font-bold text-gray-800">
                  {index + 1}
                </div>
              </div>

              <h4 className="text-xl font-bold mb-4 group-hover:text-blue-600 transition-colors">
                {step.title}
              </h4>
              <p className="text-gray-600 leading-relaxed">{step.description}</p>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  )
}
import React, { useState } from "react"
import "aos/dist/aos.css"
import { motion } from "framer-motion"
import { features } from "./Data"

interface FeaturesProps {
  city?: string
}

export default function Features({ city }: FeaturesProps) {
  const [activeFeature, setActiveFeature] = useState<number | null>(null)

  const nextFeature = () => {
    setActiveFeature((prev) => (prev === null ? 0 : (prev + 1) % features.length))
  }

  const prevFeature = () => {
    setActiveFeature((prev) =>
      prev === null
        ? features.length - 1
        : (prev - 1 + features.length) % features.length
    )
  }

  return (
    <section
      id="features"
      data-aos="fade-up"
      className="scroll-mt-20 px-6 py-20 bg-white"
    >
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold mb-6">
            {city
              ? `Top Features for Finding Roommates in ${city}`
              : "Features You'll Actually Use"}
          </h2>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            {city
              ? `Discover the tools and filters that have helped thousands find roommates in ${city}.`
              : "Built by roommate searchers, for roommate searchers. Every feature solves a real problem."}
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {features.map((feature, index) => (
            <motion.div
              key={index}
              data-aos="zoom-in-up"
              whileHover={{ scale: 1.03 }}
              className="group relative overflow-hidden bg-gradient-to-br from-[#FDFBF7] to-white p-8 rounded-2xl border-2 border-gray-200 hover:border-transparent transition-all duration-300 transform hover:-translate-y-2 hover:shadow-2xl"
              onMouseEnter={() => setActiveFeature(index)}
              onMouseLeave={() => setActiveFeature(null)}
            >
              <div
                className={
                  `absolute inset-0 bg-gradient-to-br ${feature.color} opacity-0 group-hover:opacity-10 transition-opacity duration-300`
                }
              ></div>

              <div className="relative z-10">
                <div
                  className={`inline-flex p-4 bg-gradient-to-br ${feature.color} rounded-2xl text-white mb-6 group-hover:scale-110 transition-transform duration-300`}
                >
                  {feature.icon}
                </div>

                <h3 className="text-xl font-bold mb-4 group-hover:text-gray-800 transition-colors">
                  {feature.title}
                </h3>

                <p className="text-gray-600 leading-relaxed group-hover:text-gray-700 transition-colors">
                  {feature.description}
                </p>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  )
}
import React from "react";
import { MapPin, Phone, Mail, X, Facebook, Linkedin, Youtube } from "lucide-react";
import emailjs from "emailjs-com";

export default function ContactUs({ onClose }) {
  const sendEmail = (e) => {
    e.preventDefault();
    emailjs
      .sendForm(
        "service_x9x3x5e",
        "template_g1qck6c",
        e.target,
        "4D_p0Cy6YqcSa4sPU"
      )
      .then(
        () => {
          alert("✅ Message sent successfully!");
          e.target.reset();
          onClose();
        },
        (error) => {
          console.error("❌ Error sending email:", error.text);
          alert("Something went wrong. Please try again.");
        }
      );
  };

  return (
    // Always center the modal on screen, even on mobile
    <div className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center overflow-y-auto p-4">
      <div
        className="
          bg-white
          w-full max-w-md sm:max-w-lg md:max-w-4xl
          mx-auto rounded-2xl shadow-2xl
          overflow-hidden relative animate-fade-in
          max-h-[90vh]
        "
      >
        {/* 🚪 Exit button */}
        <button
          onClick={onClose}
          className="
            absolute top-3 right-3 z-30
            bg-white p-2 rounded-full shadow-md
            text-gray-600 hover:text-gray-800
            transition-all duration-200
          "
        >
          <X className="w-6 h-6" />
        </button>

        <div className="flex flex-col md:flex-row h-full">
          {/* — Form Section — */}
          <div className="md:w-1/2 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 p-6 sm:p-8 overflow-y-auto">
            <h2 className="text-2xl sm:text-3xl font-bold text-slate-800 mb-6">
              Get In Touch
            </h2>
            <form className="space-y-4" onSubmit={sendEmail}>
              <input
                type="text"
                name="name"
                placeholder="Your Name"
                required
                className="w-full p-4 text-base border border-black rounded-xl bg-white/80 text-slate-700 placeholder-slate-400 focus:ring-2 focus:ring-blue-500 transition duration-200"
              />
              <input
                type="email"
                name="email"
                placeholder="youremail@mail.com"
                required
                className="w-full p-4 text-base border border-black rounded-xl bg-white/80 text-slate-700 placeholder-slate-400 focus:ring-2 focus:ring-blue-500 transition duration-200"
              />
              <textarea
                name="message"
                placeholder="Type your message..."
                required
                className="w-full p-4 h-32 sm:h-40 text-base border border-black rounded-xl bg-white/80 text-slate-700 placeholder-slate-400 focus:ring-2 focus:ring-blue-500 transition duration-200 resize-none"
              />
              <button
                type="submit"
                className="w-full py-4 text-base bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 text-white font-semibold rounded-xl active:scale-[0.98] transition-all duration-200 shadow-lg"
              >
                Send Message
              </button>
            </form>
          </div>

          {/* — Contact Info — */}
          <div className="md:w-1/2 bg-gradient-to-br from-slate-800 via-slate-700 to-slate-900 p-6 sm:p-8 flex flex-col justify-center text-white overflow-y-auto">
            <h3 className="text-2xl sm:text-3xl font-bold mb-3">
              Contact Information
            </h3>
            <p className="text-slate-300 mb-6 text-base sm:text-lg">
              Have a question, want to connect, or work together?
            </p>

            <div className="space-y-4">
              <div className="flex items-center space-x-3">
                <div className="bg-blue-500 p-2.5 rounded-full">
                  <MapPin className="w-5 h-5 text-white" />
                </div>
                <span className="text-slate-200 text-base">Chicago, IL</span>
              </div>
              <div className="flex items-center space-x-3">
                <div className="bg-green-500 p-2.5 rounded-full">
                  <Phone className="w-5 h-5 text-white" />
                </div>
                <span className="text-slate-200 text-base">000-000-0000</span>
              </div>
              <div className="flex items-center space-x-3">
                <div className="bg-purple-500 p-2.5 rounded-full">
                  <Mail className="w-5 h-5 text-white" />
                </div>
                <span className="text-slate-200 text-base break-all">
                  cryptocodesace@gmail.com
                </span>
              </div>
            </div>

            <div className="mt-8">
              <div className="text-slate-300 mb-2 text-base">Follow us on:</div>
              <div className="flex space-x-3">
                <div className="bg-blue-600 p-2.5 rounded-full">
                  <Facebook className="w-5 h-5 text-white" />
                </div>
                <div className="bg-blue-700 p-2.5 rounded-full">
                  <Linkedin className="w-5 h-5 text-white" />
                </div>
                <div className="bg-red-600 p-2.5 rounded-full">
                  <Youtube className="w-5 h-5 text-white" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


import "aos/dist/aos.css";
import {
  guarantees,
} from "./Data"; 

export default function Guarantees(){
    return(
        <section className="px-6 py-20 bg-gradient-to-br from-[#E4DDD2] to-[#D6CFC4]">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold mb-6">
              Our Commitment to You
            </h2>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              We stand behind our platform with guarantees that put your success
              first.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {guarantees.map((guarantee, index) => (
              <div
                key={index}
                className="bg-white p-8 rounded-2xl shadow-lg text-center hover:shadow-xl transition-all duration-300"
              >
                <div className="mb-6">{guarantee.icon}</div>
                <h3 className="text-xl font-bold mb-4">{guarantee.title}</h3>
                <p className="text-gray-600 leading-relaxed">
                  {guarantee.description}
                </p>
              </div>
            ))}
          </div>
        </div>
      </section>
    )
}import React from 'react'
import { MapPin, Shield, MessageCircle, Users, Clock } from 'lucide-react'
import "aos/dist/aos.css"

interface CTAProps { city?: string }

export default function CTA({ city }: CTAProps) {
  const locationText = city ? ` in ${city}` : ''
  return (
    <section className="px-6 py-20 text-center bg-white">
      <div className="max-w-4xl mx-auto">
        <h2 className="text-4xl md:text-6xl font-bold mb-6 leading-tight">
          Find your people{locationText}.
          <br />
          <span className="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Land your apartment{locationText}.
          </span>
        </h2>

        <p className="text-xl md:text-2xl mb-10 text-gray-600 leading-relaxed">
          Join 10,000+ verified users who've found their perfect living{locationText}.
        </p>

        <div className="flex flex-col sm:flex-row justify-center gap-4 mb-12">
          <a
            href="https://forms.gle/qJQXtqEgHb45Y2Y8A"
            target="_blank"
            rel="noopener noreferrer"
            className="group bg-black hover:bg-gray-800 text-white px-8 py-4 rounded-2xl text-lg font-semibold transition-all duration-300 transform hover:scale-105 hover:shadow-2xl flex items-center justify-center"
          >
            Start Your Search{locationText}
            <Users className="ml-2 w-5 h-5 group-hover:rotate-12 transition-transform" />
          </a>
          <a
            href="#map"
            className="group border-2 bg-white border-black hover:bg-black hover:text-white px-8 py-4 rounded-2xl text-lg font-semibold transition-all duration-300 transform hover:scale-105 flex items-center justify-center"
          >
            Explore the Map{locationText}
            <MapPin className="ml-2 w-5 h-5 group-hover:bounce transition-transform" />
          </a>
        </div>

        <div className="flex justify-center items-center space-x-8 text-sm text-gray-500">
          <div className="flex items-center space-x-2">
            <Shield className="w-4 h-4" />
            <span>100% Verified</span>
          </div>
          <div className="flex items-center space-x-2">
            <Clock className="w-4 h-4" />
            <span>Setup in 2 minutes</span>
          </div>
          <div className="flex items-center space-x-2">
            <MessageCircle className="w-4 h-4" />
            <span>Always Free</span>
          </div>
        </div>
      </div>
    </section>
  )
}
import React from "react"
import { MapPin, ArrowRight } from "lucide-react"
import "aos/dist/aos.css"
import { motion } from "framer-motion"

interface HeroSectionProps {
  city?: string
}

export default function HeroSection({ city }: HeroSectionProps) {
  // Prepare dynamic text
  const cityText = city ? ` in ${city}` : ""
  const headline = city
    ? (
        <>
          Find your <span className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">vibe</span>{cityText}.<br />
          Find your <span className="bg-gradient-to-r from-green-600 via-teal-600 to-blue-600 bg-clip-text text-transparent">space</span>{cityText}.<br />
          Find <span className="bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent">MyRoomie</span>.
        </>
      )
    : (
        <>
          Find your <span className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">vibe</span>.<br />
          Find your <span className="bg-gradient-to-r from-green-600 via-teal-600 to-blue-600 bg-clip-text text-transparent">space</span>.<br />
          Find <span className="bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent">MyRoomie</span>.
        </>
      )

  const subtext = city
    ? `Looking for roommates${cityText}? The first roommate finder that's safe, real, and tailored for your area.`
    : "The first roommate finder that's safe, real, and actually works. Join thousands who've ditched fake profiles and broken filters for genuine connections."

  return (
    <section id="home" className="scroll-mt-32 px-6 py-40 text-center bg-white min-h-screen flex items-center">
      <div className="max-w-6xl mx-auto" data-aos="fade-up">
        <h1 className="text-5xl md:text-7xl font-bold mb-6 leading-tight">
          {headline}
        </h1>

        <p className="text-xl md:text-2xl mb-10 text-gray-600 max-w-3xl mx-auto leading-relaxed">
          {subtext}
        </p>

        <div className="flex flex-col sm:flex-row justify-center gap-4 mb-12">
          <motion.a
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            href="https://forms.gle/qJQXtqEgHb45Y2Y8A"
            target="_blank"
            rel="noopener noreferrer"
            className="bg-black hover:bg-gray-800 text-white px-8 py-4 rounded-2xl text-lg font-semibold transition-all duration-300 flex items-center justify-center"
          >
            Become a beta tester
            <ArrowRight className="ml-2 w-5 h-5" />
          </motion.a>
          <motion.a
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            href="#howitworks"
            className="border-2 border-black hover:bg-black hover:text-white px-8 py-4 rounded-2xl text-lg font-semibold transition-all duration-300 flex items-center justify-center"
          >
            See How It Works
            <MapPin className="ml-2 w-5 h-5" />
          </motion.a>
        </div>

        <div id="map" className="scroll-mt-28 relative max-w-4xl mx-auto">
          <div className="bg-gradient-to-r from-blue-500/20 via-purple-500/20 to-pink-500/20 rounded-3xl p-8 backdrop-blur-sm border border-white/20 shadow-2xl">
            <div className="bg-white/80 backdrop-blur rounded-2xl p-6 shadow-lg">
              <div className="flex items-center justify-between mb-4">
                <div className="flex space-x-2">
                  <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                  <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                  <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                </div>
                <span className="text-sm text-gray-500">
                  MyRoomie Map Demo
                </span>
              </div>
              <div className="h-64 bg-gradient-to-br from-blue-100 via-purple-50 to-pink-100 rounded-xl flex items-center justify-center">
                <div className="text-center">
                  <MapPin className="w-16 h-16 mx-auto mb-4 text-blue-600" />
                  <p className="text-gray-600 font-medium">
                    Interactive map demo coming soon
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}
"use client";

import React, { useState } from "react";
import Link from "next/link";
import { Home, TrendingUp, Star, Users, Clock, Menu, X } from "lucide-react";
import { motion } from "framer-motion";

interface NavbarProps {
  setIsOpen: (open: boolean) => void;
}

export default function Navbar({ setIsOpen }: NavbarProps) {
  const [trustBarVisible, setTrustBarVisible] = useState(true);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const sections = ["Home", "Features", "How It Works"];

  const getHashLink = (item: string) => `/#${item.replace(/\s+/g, "").toLowerCase()}`;

  return (
    <>
      <header className="bg-white shadow-sm fixed top-0 left-0 w-full z-50">
        <div className="max-w-6xl mx-auto flex items-center justify-between px-6 py-4">
          {/* Logo */}
          <div className="flex items-center">
            <Home className="w-6 h-6 text-black mr-2" />
            <span className="text-xl font-bold text-gray-900">MyRoomy</span>
          </div>

          {/* Desktop nav */}
          <nav className="hidden md:flex">
            <ul className="flex space-x-8 text-gray-700 items-center">
              {sections.map((item) => (
                <li key={item}>
                  <Link href={getHashLink(item)} className="text-gray-700 hover:text-black font-medium">
                    {item}
                  </Link>
                </li>
              ))}
              <li>
                <Link href="/blog" className="text-gray-700 hover:text-black font-medium">
                  Blogs
                </Link>
              </li>
              <li>
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.97 }}
                  onClick={() => setIsOpen(true)}
                  className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white px-6 py-2 rounded-lg font-semibold hover:brightness-110 transition-all"
                >
                  Contact Us
                </motion.button>
              </li>
            </ul>
          </nav>

          {/* Mobile nav - Contact Us button and hamburger */}
          <div className="md:hidden flex items-center space-x-3">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.97 }}
              onClick={() => setIsOpen(true)}
              className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white px-4 py-2 rounded-lg font-semibold hover:brightness-110 transition-all text-sm"
            >
              Contact
            </motion.button>

            <button
              className="focus:outline-none"
              onClick={() => setMobileMenuOpen((open) => !open)}
              aria-label="Toggle menu"
            >
              {mobileMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
            </button>
          </div>
        </div>

        {/* Mobile nav drawer - only navigation items */}
        {mobileMenuOpen && (
          <motion.nav
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: "auto", opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="md:hidden bg-white shadow-md"
          >
            <ul className="flex flex-col space-y-4 px-6 py-4 text-gray-700">
              {sections.map((item) => (
                <li key={item} onClick={() => setMobileMenuOpen(false)}>
                  <Link href={getHashLink(item)} className="block font-medium hover:text-black py-2">
                    {item}
                  </Link>
                </li>
              ))}
              <li onClick={() => setMobileMenuOpen(false)}>
                <Link href="/blog" className="block font-medium hover:text-black py-2">
                  Blogs
                </Link>
              </li>
            </ul>
          </motion.nav>
        )}
      </header>

      {/* Trust bar */}
      {trustBarVisible && (
        <div className="fixed top-[72px] left-0 w-full bg-gradient-to-r from-blue-800 via-cyan-700 to-gray-800 text-white px-6 py-3 text-center z-40">
          <div className="relative max-w-6xl mx-auto">
            <div className="flex items-center justify-center space-x-8 text-sm">
              <div className="flex items-center space-x-2">
                <TrendingUp className="w-4 h-4" />
                <span>Our Goal</span>
              </div>
              <div className="flex items-center space-x-2">
                <Users className="w-4 h-4" />
                <span>10,000+ verified users</span>
              </div>
              <div className="flex items-center space-x-2">
                <Star className="w-4 h-4" />
                <span>4.9/5 rating</span>
              </div>
              <div className="flex items-center space-x-2">
                <Clock className="w-4 h-4" />
                <span>7-day avg. match time</span>
              </div>
            </div>
            <button
              onClick={() => setTrustBarVisible(false)}
              className="absolute right-0 top-1/2 transform -translate-y-1/2 hover:bg-white/20 rounded-full p-1 transition-colors"
              aria-label="Close trust bar"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        </div>
      )}

      {/* Spacer for fixed header + trust bar */}
      <div className={trustBarVisible ? "mt-[120px]" : "mt-[72px]"} />
    </>
  );
}
"use client";

import React from 'react';
import Link from 'next/link';
import {
  Home,
  MapPin,
  Shield,
  Users,
  Mail,
  Twitter,
  Instagram,
} from 'lucide-react';

interface FooterProps {
  setIsOpen: (open: boolean) => void;
}

export default function Footer({ setIsOpen }: FooterProps) {
  const internalLinks = [
    { label: 'Features', href: '/#features' },
    { label: 'How It Works', href: '/#howitworks' },
    { label: 'Pricing', href: '/#pricing' },
    { label: 'FAQs', href: '/#faqs' },
  ];

  const trustLinks = [
    { label: 'Verification Tiers', href: '/#verificationtiers' },
    { label: 'Community Guidelines', href: '/#communityguidelines' },
    { label: 'Report a Profile', href: '/#reportaprofile' },
    { label: 'Safety Tips', href: '/#safetytips' },
  ];

  const companyLinks = [
    { label: 'About Us', href: '/#aboutus' },
    { label: 'Careers', href: '/careers' },
    { label: 'Terms & Privacy', href: '/terms' },
  ];

  const policyLinks = [
    { label: 'Privacy Policy', href: '/privacy' },
    { label: 'Terms of Service', href: '/terms' },
    { label: 'Cookie Policy', href: '/cookie-policy' },
  ];

  return (
    <footer className="bg-[#BFBFBF] text-gray-800">
      {/* Top Section */}
      <div className="px-6 py-16 max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-4 gap-12">
        {/* Brand */}
        <div>
          <Link href="/" className="flex items-center mb-4">
            <Home className="w-6 h-6 mr-2 text-gray-900" />
            <span className="text-2xl font-bold text-gray-900">MyRoomy</span>
          </Link>
          <p className="text-gray-600 mb-4 leading-relaxed">
            The roommate finder that actually works. Safe, real, and free.
          </p>
          <div className="flex space-x-4">
            <a href="https://facebook.com" target="_blank" rel="noopener noreferrer"
              className="w-10 h-10 bg-black rounded-lg flex items-center justify-center text-white hover:bg-gray-800 transition-colors">
              f
            </a>
            <a href="https://twitter.com" target="_blank" rel="noopener noreferrer"
              className="w-10 h-10 bg-black rounded-lg flex items-center justify-center text-white hover:bg-gray-800 transition-colors">
              t
            </a>
            <a href="https://linkedin.com" target="_blank" rel="noopener noreferrer"
              className="w-10 h-10 bg-black rounded-lg flex items-center justify-center text-white hover:bg-gray-800 transition-colors">
              in
            </a>
          </div>
        </div>

        {/* Product */}
        <div>
          <h5 className="font-bold mb-4 text-lg">Product</h5>
          <ul className="space-y-3">
            {internalLinks.map(({ label, href }) => (
              <li key={label}>
                <Link href={href} className="text-gray-600 hover:text-gray-900 transition-colors">
                  {label}
                </Link>
              </li>
            ))}
          </ul>
        </div>

        {/* Trust & Safety */}
        <div>
          <h5 className="font-bold mb-4 text-lg">Trust &amp; Safety</h5>
          <ul className="space-y-3">
            {trustLinks.map(({ label, href }) => (
              <li key={label}>
                <Link href={href} className="text-gray-600 hover:text-gray-900 transition-colors">
                  {label}
                </Link>
              </li>
            ))}
          </ul>
        </div>

        {/* Company */}
        <div>
          <h5 className="font-bold mb-4 text-lg">Company</h5>
          <ul className="space-y-3">
            <li>
              <button
                onClick={() => setIsOpen(true)}
                className="text-gray-700 hover:text-gray-900 font-medium transition-colors"
              >
                Contact Us
              </button>
            </li>
            {companyLinks.map(({ label, href }) => (
              <li key={label}>
                <Link href={href} className="text-gray-600 hover:text-gray-900 transition-colors">
                  {label}
                </Link>
              </li>
            ))}
          </ul>
        </div>
      </div>

      {/* Bottom Section */}
      <div className="border-t border-gray-400 py-8">
        <div className="max-w-6xl mx-auto flex flex-col md:flex-row justify-between items-center px-6">
          <p className="text-gray-600 mb-4 md:mb-0">
            © 2025 MyRoomy. All rights reserved.
          </p>
          <div className="flex space-x-6 text-sm">
            {policyLinks.map(({ label, href }) => (
              <Link key={label} href={href} className="text-gray-600 hover:text-gray-900 transition-colors">
                {label}
              </Link>
            ))}
          </div>
        </div>
      </div>
    </footer>
  );
}
'use client';

import React from 'react';
import Link from 'next/link';
import cities from './_data/cities.json';

// src/app/roommates/CityIndex.tsx
export default function CityIndex() {
  return (
    <ul className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 max-w-7xl mx-auto">
      {cities.map(({ slug, name }) => (
        <li key={slug}>
          <Link
            href={`/roommates/${slug}`}
            className="
              block p-6 bg-white rounded-2xl shadow hover:shadow-lg transition
              border border-gray-200 hover:border-transparent
              group"
          >
            <h3 className="text-xl font-semibold group-hover:text-blue-600 mb-2">
              {name}
            </h3>
            <p className="text-gray-500 text-sm">
              Find roommates in <span className="font-medium">{name.split(',')[0]}</span>
            </p>
          </Link>
        </li>
      ))}
    </ul>
  );
}
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
// src/app/blogs/BlogPageClient.tsx
'use client';

import React, { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import {
  Calendar,
  Clock,
  ArrowLeft,
  Share2,
} from "lucide-react";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";
import ContactUs from "@/components/ContactUs";
import type { Blog } from "./blogData";

export default function BlogPageClient({ blog }: { blog: Blog }) {
  const router = useRouter();
  const [isOpen, setIsOpen] = useState(false);
  const [shareSnackbar, setShareSnackbar] = useState(false);

  const shareArticle = () => {
    const shareData = {
      title: blog.title,
      text: blog.excerpt,
      url: window.location.href,
    };

    if (navigator.share) {
      navigator.share(shareData).catch(console.error);
    } else {
      navigator.clipboard.writeText(shareData.url).then(() => {
        setShareSnackbar(true);
      });
    }
  };

  return (
    <div className="min-h-screen bg-white text-gray-800">
      <Navbar setIsOpen={setIsOpen} />
      {isOpen && <ContactUs onClose={() => setIsOpen(false)} />}

      <main className="max-w-4xl mx-auto px-6 py-20">
        <button
          onClick={() => router.back()}
          className="mb-6 flex items-center gap-2 text-gray-600 hover:text-gray-800 cursor-pointer"
        >
          <ArrowLeft className="w-4 h-4" />
          Back
        </button>

        <div className="bg-blue-100 inline-block px-4 py-1 rounded-full text-sm font-medium text-blue-800 mb-4">
          {blog.category}
        </div>

        <h1 className="text-4xl font-bold mb-6">{blog.title}</h1>

        <div className="flex items-center text-sm text-gray-500 mb-6">
          <div className="flex items-center gap-2 mr-6">
            <Calendar className="w-4 h-4" />
            {new Date(blog.date).toLocaleDateString()}
          </div>
          <div className="flex items-center gap-2">
            <Clock className="w-4 h-4" />
            {blog.readTime}
          </div>
        </div>

        {blog.image && (
          <img
            src={blog.image}
            alt={blog.title}
            className="rounded-xl mb-8 w-full max-h-[400px] object-cover"
          />
        )}

        <p className="bg-blue-50 border-l-4 border-blue-500 p-4 mb-6 text-gray-700 font-medium">
          {blog.introText}
        </p>

        <div className="mb-6">
          {blog.tags.map((tag) => (
            <span
              key={tag}
              className="inline-block bg-gray-100 text-gray-600 px-2 py-1 rounded text-xs mr-2"
            >
              #{tag}
            </span>
          ))}
        </div>

        <div className="prose prose-lg max-w-none">
          {blog.sections.map((section, i) => (
            <section key={i} className="mb-12">
              <h2 className="text-2xl font-bold mb-4">{section.subtitle}</h2>
              {Array.isArray(section.content) ? (
                <ul className="list-disc pl-5">
                  {section.content.map((item, j) => (
                    <li key={j} className="mb-2">
                      <strong>{item.label}:</strong> {item.text}
                    </li>
                  ))}
                </ul>
              ) : (
                <p className="text-gray-700 whitespace-pre-line">
                  {section.content}
                </p>
              )}
              {section.image && (
                <img
                  src={section.image}
                  className="rounded-xl my-6 max-h-[400px] object-cover"
                />
              )}
              {section.video && (
                <video
                  src={section.video}
                  className="rounded-xl my-6 w-full"
                  controls
                />
              )}
            </section>
          ))}
        </div>

        <div className="flex justify-between items-center mt-12 border-t pt-6">
          <Link
            href="/blogs"
            className="text-blue-600 hover:text-blue-800 font-medium flex items-center gap-2"
          >
            <ArrowLeft className="w-4 h-4" />
            All Posts
          </Link>
          <button
            onClick={shareArticle}
            className="text-sm text-gray-600 hover:text-gray-900 flex items-center gap-2"
          >
            <Share2 className="w-4 h-4" />
            Share
          </button>
        </div>
      </main>

      <Footer setIsOpen={setIsOpen} />
    </div>
  );
}
// src/data/blogData.ts

export interface BlogPost {
    id: number;
    title: string;
    date: string;
    author: string;
    category: string;
    introText: string;
    excerpt: string;
    readTime: string;
    image: string;
    likes: number;
    comments: number;
    featured: boolean;
    tags: string[];
    sections: Array<{
      subtitle: string;
      content: string | Array<{ label: string; text: string }>;
      image?: string;
      video?: string;
    }>;
  }
  
  export const blogData: Record<number, BlogPost> = {
    1: {
      id: 1,
      title: "Roommate Compatibility: The Real Questions That Matter",
      date: "2025-06-10",
      author: "Sarah Chen",
      category: "Tips & Guides",
      introText:
        "Most roommate conflicts aren't about chores or noise — they're about mismatched values, habits, and expectations. This guide dives into the psychology of compatibility, with 15 real questions that predict co-living success. In this extended guide, we'll explore detailed scenarios, share personal stories from pairs of roommates who made it work (and those who didn't), and provide practical exercises to help you apply these insights in real time.",
      excerpt:
        "Stop wasting time with surface-level questions. These psychology-backed conversation starters reveal true compatibility and prevent future conflicts. Dive deeper into each query to unlock meaningful dialogue that lays the foundation for lasting harmony, and see sample transcripts to model your own discussions.",
      readTime: "8 min read",
      image:
        "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=800&h=400&fit=crop",
      likes: 247,
      comments: 18,
      featured: true,
      tags: ["Compatibility", "Psychology", "Communication"],
      sections: [
        {
          subtitle: "Why Compatibility is Deeper Than Preferences",
          content: [
            {
              label: "The Surface Trap",
              text:
                "People often match based on music taste or favorite shows — but those rarely impact day-to-day living satisfaction. You might both love the same band yet clash over sleep schedules or cleaning habits.",
            },
            {
              label: "What Actually Matters",
              text:
                "Values around cleanliness, boundaries, emotional regulation, and communication styles are far more predictive of harmony. Disagreements over whether dishes can sit overnight reveal underlying differences in respect and responsibility.",
            },
            {
              label: "Daily Routine Sync",
              text:
                "Aligning daily schedules ensures that you respect each other's rhythms—whether it's an early morning workout or late-night work sessions. Misaligned routines are a frequent source of friction when one person's alarm goes off at 5 AM while the other is trying to sleep.",
            },
            {
              label: "Communication Frequency",
              text:
                "Some people prefer check-ins every few hours, others only once a day. Discussing how often you want to communicate about chores, groceries, or guests helps set clear expectations and avoid misunderstandings.",
            },
          ],
          image:
            "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=800&h=400&fit=crop",
        },
        {
          subtitle: "15 Compatibility Questions That Reveal Red Flags",
          content:
            "We've compiled 15 questions based on therapist-approved roommate counseling practices. These include: 'How do you prefer to resolve conflict?', 'How do you define clean?', 'What does privacy mean to you?', and more. These aren't yes/no — they spark stories, which is where real insight lives.\n\nAdditional sample prompts:\n• How do you decompress after a long day?\n• What role does spontaneity play in your life?\n• How do you handle shared expenses on a tight budget?\n• Are you a saver or spender when it comes to household items?\n• What's your ideal balance between socializing and solitude?\n\nEach question is designed to surface core values and prevent surprises down the road.",
          video:
            "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=800&h=400&fit=crop",
        },
        {
          subtitle: "The Psychology Behind Successful Co-Living",
          content:
            "Research shows that shared values predict roommate satisfaction better than shared interests. When people align on core principles like respect, communication, and responsibility, minor differences become manageable quirks rather than deal-breakers. In addition, longitudinal studies indicate that fairness in chore distribution and financial transparency are strong mediators of long-term happiness.\n\nCase Study: In one 12-month study, pairs who conducted weekly check-ins reported 65% fewer disputes compared to those who only chatted informally. That consistency builds trust — and trust is the glue of any shared household.",
        },
        {
          subtitle: "Conclusion: Choose Alignment, Not Just Affection",
          content:
            "Liking someone isn't enough. Co-living works when your habits and values align. Start hard conversations early — they pay off in months of peaceful coexistence and genuine friendship. Remember, compatibility is an ongoing practice, not a one-time checkbox. Schedule quarterly roommate retrospectives to celebrate wins and address simmering issues before they boil over.",
        },
        {
          subtitle: "Frequently Asked Questions",
          content: [
            {
              label: "Q: How do we start these tough conversations?",
              text:
                "Begin with a relaxed setting—over coffee or during a walk. Use open-ended prompts, listen actively, and avoid blame. Frame it as building a happier home together.",
            },
            {
              label: "Q: What if we disagree on a core value?",
              text:
                "A single difference isn't a deal-breaker—what matters is your willingness to compromise and establish a boundary that works for both.",
            },
            {
              label: "Q: How often should we revisit our agreements?",
              text:
                "Monthly check-ins are ideal in the first three months, then quarterly. Consistency prevents small annoyances from festering.",
            },
          ],
        },
        {
          subtitle: "Further Reading & Tools",
          content:
            "• Download our free compatibility worksheet: outlines questions and space for notes.\n• Recommended book: 'Connected Living' by Dr. Anne Wallace.\n• Podcast: 'Roommate Real Talk' — episodes on boundary setting and conflict resolution.\n• Online quiz: Take the 'Shared Space Values' assessment at myroomy.com/quiz.",
        },
      ],
    },
  
    2: {
      id: 2,
      title: "Building Trust in Roommate Apps: How We Verify Profiles",
      date: "2025-06-08",
      author: "Mike Rodriguez",
      category: "Safety & Trust",
      introText:
        "Fake roommate profiles lead to scams, ghosting, and bad living experiences. Here's how MyRoomy uses layered verification to create real trust — and how you can vet potential roommates safely. We’ll walk through each verification step in detail, show you dashboard screenshots, and share tips to spot fakes that slip through the cracks.",
      excerpt:
        "Learn the difference between minor quirks and major warning signs. Our data shows these 7 behaviors predict 89% of roommate conflicts. Discover the red-flag checklist top landlords use — and how our system automates it seamlessly.",
      readTime: "6 min read",
      image:
        "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=800&h=400&fit=crop",
      likes: 189,
      comments: 25,
      featured: false,
      tags: ["Safety", "Verification", "Trust"],
      sections: [
        {
          subtitle: "Why Most Platforms Fail",
          content: [
            {
              label: "Weak Identity Checks",
              text:
                "Traditional apps rely on email or phone verification, which is easy to fake. We go further with government ID + selfie verification to confirm you are who you claim to be.",
            },
            {
              label: "Lack of Community Oversight",
              text:
                "Fake listings spread when no one is accountable. We counter this with active moderation, user flagging, and 24-hour response guarantees to investigate any suspicious activity.",
            },
            {
              label: "Shallow Background Checks",
              text:
                "Many apps don’t verify rental history or criminal records. We partner with trusted data providers to surface any major infractions, with the user’s consent, before you swipe right.",
            },
          ],
          video:
            "https://images.unsplash.com/photo-1551434678-e076c223a692?w=800&h=400&fit=crop",
        },
        {
          subtitle: "Our 3-Layer Verification Approach",
          content:
            "1. Government ID scan with liveness check to prevent spoofing.\n2. AI-based photo comparison to ensure the selfie matches the ID.\n3. Community flagging for ongoing safety — every flag triggers a manual review within 12 hours.\n\nSince launching, this model has reduced fake profiles by 94% and increased completed move-in rates by 37%.",
        },
        {
          subtitle: "Red Flags to Watch For",
          content:
            "Even with verification, stay alert for warning signs: reluctance to video chat, pressure to move quickly, requests for money upfront, or narratives that keep changing. Keep records of all communication, and trust your instincts if anything feels off.",
        },
        {
          subtitle: "Staying Safe When You Meet",
          content:
            "Even with verified matches, we recommend: always meet in a public place first (coffee shops or co-working spaces work great), video chat beforehand to see the person in action, and set clear expectations in writing (via email or chat). Safety is a shared responsibility — you get out what you put in.",
        },
        {
          subtitle: "Community Success Stories",
          content:
            "• Jane & Laura matched through our ID + photo process, now co-host monthly book clubs together.\n• Raj spotted a fake profile thanks to our flagging popup, preventing a $1,200 deposit loss.\n• Marcus discovered his perfect match while scrolling our safety dashboard during lunch break.",
        },
        {
          subtitle: "FAQs: Verification & Privacy",
          content: [
            {
              label: "Q: Is my ID data secure?",
              text:
                "Absolutely. We encrypt all uploads end-to-end and purge raw images after verification completes.",
            },
            {
              label: "Q: Can I opt out of community flagging?",
              text:
                "Flagging is voluntary but highly encouraged—more eyes make the platform safer for everyone.",
            },
            {
              label: "Q: What if I don’t have a government-issued ID?",
              text:
                "We support passports and national IDs from over 50 countries. If yours isn’t listed, contact support for manual review.",
            },
          ],
        },
        {
          subtitle: "Recommended Resources",
          content:
            "• Whitepaper on digital ID best practices: myroomy.com/whitepaper\n• Webinar: 'Trust & Safety in PropTech' — recorded session available on YouTube.\n• Blog series: 'Inside Verification' — upcoming deep dives on biometric liveness checks.",
        },
      ],
    },
  
    3: {
      id: 3,
      title: "Why 90% of Roommate Apps Fail (And How We're Different)",
      date: "2025-06-05",
      author: "Alex Kim",
      category: "Industry Insights",
      introText:
        "An inside look at the broken roommate industry, why existing solutions don't work, and how we're building something that actually helps people find compatible living situations. We’ll trace the rise and fall of five major apps, analyze user reviews, and show you exactly where each one missed the mark.",
      excerpt:
        "An insider’s guide to why legacy platforms disappoint renters and how a new generation of tools is rewriting the rules. We share data on user churn, average days-to-match, and satisfaction ratings to prove our point.",
      readTime: "12 min read",
      image:
        "https://images.unsplash.com/photo-1551434678-e076c223a692?w=800&h=400&fit=crop",
      likes: 342,
      comments: 47,
      featured: true,
      tags: ["Industry", "Product", "Innovation"],
      sections: [
        {
          subtitle: "The Fundamental Problems",
          content: [
            {
              label: "Surface-Level Matching",
              text:
                "Most apps focus on preferences (music, movies) rather than values (cleanliness, boundaries, communication). This leads to mismatched expectations and high churn rates.",
            },
            {
              label: "Lack of Safety Measures",
              text:
                "Weak verification systems allow fake profiles to flourish, creating unsafe environments and wasting users' time on no-shows or scams.",
            },
            {
              label: "Poor User Experience",
              text:
                "Clunky interfaces, limited search filters, and no meaningful conversation starters make it hard to connect authentically. Many users abandon apps after two weeks due to frustration.",
            },
            {
              label: "Data Silos",
              text:
                "Apps don’t share insights across platforms. Your history, preferences, and flags remain locked inside one app, even if you switch services.",
            },
          ],
        },
        {
          subtitle: "What Makes MyRoomy Different",
          content:
            "We focus on compatibility over convenience. Our matching algorithm considers lifestyle habits, conflict resolution styles, and living preferences. Onboarding takes 10 minutes but saves months of stress. Plus, we’ve implemented robust verification and safety features that other platforms lack.",
        },
        {
          subtitle: "The Road Ahead",
          content:
            "The roommate industry is ripe for disruption. By putting safety, compatibility, and user experience first, we're building the platform we wished existed when we were apartment hunting. Next, we’ll launch neighborhood-based matching and AI-driven chore scheduling.",
        },
        {
          subtitle: "Innovation Timeline",
          content:
            "• Q3 2025: Beta for AI-driven neighborhood clusters.\n• Q4 2025: Launch chore-scheduling assistant integrated with calendars.\n• Q1 2026: Mobile app redesign based on user feedback from 50,000 interviews.",
        },
        {
          subtitle: "Expert Voices",
          content: [
            {
              label: "Dr. Ellen Park, Sociologist",
              text:
                "'Values alignment is the single biggest predictor of roommate longevity. Surface preferences rarely matter after move-in.'",
            },
            {
              label: "Tom Nguyen, PropTech Analyst",
              text:
                "'MyRoomy’s layered approach to verification sets a new standard in digital trust for shared living.'",
            },
          ],
        },
        {
          subtitle: "FAQs: Platform & Performance",
          content: [
            {
              label: "Q: How fast is the average match?",
              text:
                "Users report an average of 3 days from profile completion to first meaningful conversation.",
            },
            {
              label: "Q: What’s the refund policy if I cancel?",
              text:
                "We offer a prorated refund within 7 days of subscription start—no questions asked.",
            },
          ],
        },
        {
          subtitle: "Further Studies & Links",
          content:
            "• Download our full industry report: myroomy.com/industry-report-2025\n• Case study: 'Turning Churn into Retention' — available on our blog.\n• Video panel: 'The Future of Shared Living' — recorded at PropTech Summit 2025.",
        },
      ],
    },
  
    4: {
      id: 4,
      title: "The Hidden Costs of Bad Roommates: A $11,000 Wake-Up Call",
      date: "2025-06-03",
      author: "Jessica Liu",
      category: "Financial Tips",
      introText:
        "From broken leases to damaged credit scores, we break down the real financial impact of poor roommate choices and how to protect yourself from costly mistakes. You’ll see real invoices, credit report screenshots, and detailed breakdowns of average expenses across 10 U.S. cities.",
      excerpt:
        "From broken leases to damaged credit scores, we break down the real financial impact of poor roommate choices and how to protect yourself. Learn how to draft airtight agreements and leverage legal tools to safeguard your wallet.",
      readTime: "7 min read",
      image:
        "https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=800&h=400&fit=crop",
      likes: 156,
      comments: 12,
      featured: false,
      tags: ["Finance", "Risk Management", "Planning"],
      sections: [
        {
          subtitle: "The True Cost of Roommate Disasters",
          content: [
            {
              label: "Broken Lease Penalties",
              text:
                "Average cost: $2,000–4,000. When roommates bail unexpectedly, you're often left covering their portion or facing early termination fees. We show you amortized scenarios from NYC, LA, and Chicago.",
            },
            {
              label: "Credit Score Damage",
              text:
                "Missed rent payments can drop your credit score by 50–100 points, affecting future rental applications and loan rates for years. One case study saw a 120-point drop after two missed payments over three months.",
            },
            {
              label: "Security Deposit Loss",
              text:
                "Damage from irresponsible roommates often exceeds security deposits, leaving you with repair bills averaging $1,500–3,000. We share before-and-after apartment inspection photos to drive the point home.",
            },
            {
              label: "Legal Fees",
              text:
                "Disputes can lead to small claims court, with filing fees, attorney consultations, and lost time often costing an additional $500–1,200.",
            },
          ],
        },
        {
          subtitle: "Hidden Costs Most People Miss",
          content:
            "Beyond obvious expenses, bad roommates create indirect costs: higher utility bills from wasteful habits, replacement of damaged personal items, moving expenses when situations become unbearable, and lost productivity from constant stress and conflict. In one survey, 28% of respondents reported paying $200+ for unexpected repairs.",
        },
        {
          subtitle: "Protection Strategies",
          content:
            "Get everything in writing, including utility responsibilities and house rules. Consider renter's insurance that covers roommate situations. Screen thoroughly—a $50 background check is cheaper than a $5,000 mistake. We provide a free template lease addendum you can download.",
        },
        {
          subtitle: "When to Cut Your Losses",
          content:
            "Sometimes the best financial decision is leaving early. If your roommate consistently misses payments, damages property, or creates unsafe conditions, the cost of staying often exceeds the cost of leaving. We walk through how to negotiate early lease termination with minimal penalty.",
        },
        {
          subtitle: "Case Studies in Cost Recovery",
          content:
            "• Chicago: Tenant recovered $3,200 via small claims court after documented damage.  \n• Seattle: Two roommates split a $2,500 penalty by leveraging jointly signed addendums.  \n• Miami: User used renter’s insurance to cover $1,800 in stolen personal items.",
        },
        {
          subtitle: "FAQs & Legal Tips",
          content: [
            {
              label: "Q: Can I break my lease if my roommate defaults?",
              text:
                "Check your lease terms—some states allow early termination for roommate breach. Consult a tenant-rights attorney.",
            },
            {
              label: "Q: How do I document damage properly?",
              text:
                "Use dated photos, witness statements, and certified letters. Store everything in a secure folder.",
            },
          ],
        },
        {
          subtitle: "Resource Links",
          content:
            "• Download lease-addendum template: myroomy.com/templates/lease-addendum  \n• Tenant’s rights guide: tenantsunion.org/guide  \n• Renter’s insurance comparison chart: compareinsure.com/renter",
        },
      ],
    },
  
    5: {
      id: 5,
      title: "Gen Z's Housing Crisis: Why Traditional Apartment Hunting Is Broken",
      date: "2025-06-01",
      author: "David Park",
      category: "Market Analysis",
      introText:
        "Rent prices up 40%, fake listings everywhere, and platforms that don't understand modern renters. Here's what needs to change in the housing market. We analyze census data, interview Gen Z renters, and forecast trends through 2030.",
      excerpt:
        "Rent prices up 40%, fake listings everywhere, and platforms that don't understand modern renters. Here's what needs to change—and how collaborative living can save the day.",
      readTime: "10 min read",
      image:
        "https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=800&h=400&fit=crop",
      likes: 298,
      comments: 63,
      featured: false,
      tags: ["Gen Z", "Housing Crisis", "Market Trends"],
      sections: [
        {
          subtitle: "The Numbers Don't Lie",
          content: [
            {
              label: "Rent Inflation",
              text:
                "Average rent has increased 40% in major cities since 2020, while entry-level salaries have grown only 12%. The math simply doesn't work for most young renters. We chart median rents versus wages to illustrate the widening gap.",
            },
            {
              label: "Fake Listing Problem",
              text:
                "Studies show 30% of rental listings on major platforms are fake or misleading, wasting renters' time and money on application fees. We share horror stories from renters who lost deposits on ghost listings.",
            },
          ],
        },
        {
          subtitle: "Why Traditional Platforms Fail Gen Z",
          content:
            "Legacy rental sites were built for a different era. They don't account for gig work income, prioritize outdated criteria, and lack the transparency and community features that younger renters expect. We break down five key feature gaps.",
        },
        {
          subtitle: "The Roommate Solution",
          content:
            "For many Gen Z renters, sharing living spaces isn't just about saving money—it's about building community and sharing resources. The platforms that succeed will understand this shift from individual to collaborative living, integrating social features and group discounts.",
        },
        {
          subtitle: "Looking Forward",
          content:
            "The housing crisis requires innovative solutions. Platforms that prioritize transparency, community, and fair matching will define the next generation of rental experiences. We outline three startup ideas poised to disrupt the industry by 2027.",
        },
        {
          subtitle: "Voices from the Community",
          content:
            "• 'I moved in with two strangers—now we split rent and host art shows.' — Zoe, 23  \n• 'I wish I'd seen a roommate-finder that asked about my remote-work schedule.' — Jamal, 27  \n• 'We form mini-co-ops for grocery runs—that’s the future.' — Priya, 22",
        },
        {
          subtitle: "Extended Data Deep Dive",
          content:
            "Download our interactive dashboard: shows rent-to-income ratios by metro areas, vacancy rates, and gig-economy income distributions. Accessible at myroomy.com/dashboards/genz.",
        },
        {
          subtitle: "Action Steps for Renters",
          content:
            "1. Build your own sub-lease clause for roommate disputes.  \n2. Partner with local co-ops to reduce living costs.  \n3. Use OurRoomie app’s group budgeting tool to track shared expenses in real time.",
        },
      ],
    },
  
    6: {
      id: 6,
      title: "Digital Roommate Matching: The Science Behind Compatibility",
      date: "2025-05-28",
      author: "Rachel Thompson",
      category: "Product Updates",
      introText:
        "How we've eliminated 90% of fake profiles through multi-layer verification, AI detection, and community-driven safety measures that actually work. Plus, a deep dive into our matching algorithm and the data science powering each recommendation.",
      excerpt:
        "See how AI, behavioral data, and continuous learning come together to deliver highly compatible roommate matches. We pull back the curtain on model architecture, data pipelines, and privacy safeguards.",
      readTime: "5 min read",
      image:
        "https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=800&h=400&fit=crop",
      likes: 203,
      comments: 31,
      featured: false,
      tags: ["Verification", "Safety", "Technology"],
      sections: [
        {
          subtitle: "The Algorithm Behind the Magic",
          content: [
            {
              label: "Behavioral Matching",
              text:
                "We analyze communication patterns, response times, and engagement levels to identify users who are serious about finding compatible roommates. Our logistic regression model weights these signals alongside explicit preferences.",
            },
            {
              label: "Lifestyle Compatibility",
              text:
                "Our algorithm weighs factors like sleep schedules, cleanliness levels, and social preferences more heavily than surface-level interests. We normalize each input to reduce bias toward extroverts.",
            },
            {
              label: "Adaptive Weighting",
              text:
                "Over time, the model adjusts weights based on which matches lead to successful leases. We use reinforcement learning techniques to continuously optimize compatibility scores.",
            },
          ],
        },
        {
          subtitle: "Continuous Learning System",
          content:
            "Our matching algorithm improves with every successful (and unsuccessful) roommate pairing. We track long-term satisfaction through post-move surveys and adjust our compatibility models accordingly. Quarterly A/B tests validate each new feature.",
        },
        {
          subtitle: "Privacy by Design",
          content:
            "While we collect data to improve matching, user privacy is paramount. All personal information is encrypted in transit and at rest, and users control exactly what they share and with whom. We never sell data to third parties.",
        },
        {
          subtitle: "Performance Metrics",
          content:
            "• 92% reduction in false positives after adding adaptive weighting.  \n• 80% user satisfaction in post-match surveys.  \n• 1.5x increase in multi-rent lease completions year-over-year.",
        },
        {
          subtitle: "Developer Notes",
          content:
            "Our backend is built on Node.js with TypeScript, using a microservices architecture. The matching service runs in Kubernetes, with Python-based analytics pipelines in Airflow.",
        },
        {
          subtitle: "Further Reading",
          content:
            "• Blog: 'Scaling PropTech with Microservices'  \n• Paper: 'Reinforcement Learning for Real-World Matching Systems'  \n• Tutorial: 'Building Secure Verification Flows with React and MUI'.",
        },
      ],
    },
  
    7: {
      id: 7,
      title: "The Psychology of Shared Spaces: Creating Harmony at Home",
      date: "2025-05-25",
      author: "Dr. Emily Chen",
      category: "Tips & Guides",
      introText:
        "Understanding the psychological dynamics of shared living spaces can transform your roommate experience from stressful to supportive. Drawing on over a decade of clinical research, this article lays out the proven frameworks for cooperation, conflict resolution, and empathy-building rituals.",
      excerpt:
        "Learn why territory matters, how emotional labor affects relationships, and which positive rituals boost roommate satisfaction by 45%. Plus, free worksheet downloads to map out your living space harmony plan.",
      readTime: "9 min read",
      image:
        "https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=800&h=400&fit=crop",
      likes: 175,
      comments: 22,
      featured: false,
      tags: ["Psychology", "Living Tips", "Mental Health"],
      sections: [
        {
          subtitle: "Territory and Personal Space",
          content:
            "Humans have an innate need for personal territory. In shared spaces, clearly defined personal areas reduce conflict and increase satisfaction. This isn't just about bedrooms—it includes designated shelf space, closet areas, and even preferred seating. We provide a template for mapping out each person’s territory.",
        },
        {
          subtitle: "The Emotional Labor of Shared Living",
          content:
            "Living with others requires emotional intelligence and energy. Successful roommates recognize this invisible work and share it fairly—from remembering to buy shared items to mediating minor conflicts. Research shows equitable emotional labor shares correlate with 60% higher relationship satisfaction.",
        },
        {
          subtitle: "Building Positive Rituals",
          content:
            "Shared positive experiences create stronger bonds than simply avoiding negative ones. Weekly dinners, movie nights, or coordinated cleaning sessions can transform roommates into genuine friends. We outline 12 ritual ideas you can implement this month.",
        },
        {
          subtitle: "Conflict Resolution Frameworks",
          content:
            "• Step 1: Acknowledge feelings openly without blame.  \n• Step 2: Identify root causes behind the disagreement.  \n• Step 3: Brainstorm mutually acceptable solutions.  \n• Step 4: Document the agreement and revisit if needed.",
        },
        {
          subtitle: "Case Vignettes",
          content: [
            {
              label: "Vignette 1",
              text:
                "Two artists sharing a loft worked through noise issues by establishing 'silent hours' during paint sessions—boosting both creativity and respect.",
            },
            {
              label: "Vignette 2",
              text:
                "A remote worker and a gamer resolved schedule clashes by designating separate zones and installing lightweight soundproofing panels.",
            },
          ],
        },
        {
          subtitle: "Practical Worksheets",
          content:
            "Download our 'Shared Space Harmony' worksheet packs—PDFs with prompts for mapping territories, chore schedules, emotional check-ins, and communication logs.",
        },
      ],
    },
  
    8: {
      id: 8,
      title: "Remote Work and Roommate Dynamics: The New Normal",
      date: "2025-05-22",
      author: "Marcus Johnson",
      category: "Market Analysis",
      introText:
        "How remote work has fundamentally changed what people need from roommates and living spaces, and what this means for the future of co-living. We surveyed 2,000 remote workers, analyzed noise complaint data, and spoke to architects designing the next generation of home offices.",
      excerpt:
        "Discover how home offices impact roommate relationships—and which layout tweaks can boost productivity and peace. Plus, get our free floorplan guide for creating quiet zones in any apartment.",
      readTime: "8 min read",
      image:
        "https://images.unsplash.com/photo-1521737604893-d14cc227d761?w=800&h=400&fit=crop",
      likes: 134,
      comments: 19,
      featured: false,
      tags: ["Remote Work", "Lifestyle", "Future Trends"],
      sections: [
        {
          subtitle: "The Home Office Revolution",
          content:
            "With more people working from home, the apartment has become office, gym, restaurant, and social space all in one. This puts new pressures on roommate relationships and space usage. We break down three common floorplan adaptations to balance privacy with collaboration.",
        },
        {
          subtitle: "Noise and Boundary Challenges",
          content:
            "Video calls, different work schedules, and the need for quiet focus have created new sources of roommate conflict. Successful remote-work roommates establish clear communication protocols—like silent hours and signal flags—to respect each other's work boundaries.",
        },
        {
          subtitle: "The Opportunity for Connection",
          content:
            "Paradoxically, spending more time at home has also created opportunities for deeper roommate relationships. Many report feeling less isolated and more connected to their living companions than before remote work. We share five conversation prompts to deepen your connections during breaks.",
        },
        {
          subtitle: "Designing Dual-Purpose Spaces",
          content:
            "• Use modular furniture that transforms from desk to dining table.  \n• Install movable partitions for pop-up office pods.  \n• Optimize lighting for both video calls and relaxation.",
        },
        {
          subtitle: "Tools & Tech for Hybrid Living",
          content:
            "• White noise machines or ambient apps to mask distractions.  \n• Shared Google Calendar with 'Do Not Disturb' blocks.  \n• IoT light panels that signal availability to roommates.",
        },
        {
          subtitle: "Remote-Work Etiquette Guide",
          content:
            "1. Communicate your daily work hours and break times.  \n2. Agree on shared quiet hours for calls and deep work.  \n3. Use visual cues (like flags or lights) outside your door.  \n4. Plan occasional social breaks—coffee or lunch together—to maintain camaraderie.",
        },
      ],
    },
  };
  
  // Export blog posts as array for BlogList component
  export const blogPosts: BlogPost[] = Object.values(blogData);
  
  // Export categories for filtering
  export const categories = [
    "All",
    "Tips & Guides",
    "Safety & Trust",
    "Industry Insights",
    "Financial Tips",
    "Market Analysis",
    "Product Updates",
    "Remote Work",
  ];// src/app/blogs/[id]/page.tsx

import { blogData } from "../blogData";
import { notFound } from "next/navigation";
import BlogPageClient from "../BlogPageClient"; // Pure presentational component, no hooks

export async function generateStaticParams() {
   return Object.keys(blogData).map((id) => ({ id }));
}

export async function generateMetadata({ params }: { params: { id: string } }) {
  const blog = blogData[Number(params.id)];
  if (!blog) return { title: "Not Found" };
  return {
    title: blog.title,
    description: blog.excerpt,
  };
}

export default function BlogPost({ params }: { params: { id: string } }) {
  const blog = blogData[Number(params.id)];
  if (!blog) return notFound();
  return <BlogPageClient blog={blog} />;
}
// src/app/blogs/[id]/page.tsx

import { blogData } from "./blogData";
import { notFound } from "next/navigation";
import BlogPageClient from "./BlogPageClient"; // ✅ Must be a separate file

export async function generateStaticParams() {
  return Object.keys(blogData).map((key) => ({
    id: key,
  }));
}



export async function generateMetadata({ params }: { params: { id: string } }) {
  const blog = blogData[Number(params.id)];
  if (!blog) return { title: "Not Found" };
  return {
    title: blog.title,
    description: blog.excerpt,
  };
}

export default function BlogPost({ params }: { params: { id: string } }) {
  const blog = blogData[Number(params.id)];
  if (!blog) return notFound();

  return <BlogPageClient blog={blog} />;
}
// src/app/page.tsx
"use client";

import React, { useEffect, lazy, Suspense } from "react"
import Head from 'next/head'
import AOS from "aos"
import "aos/dist/aos.css"

import ContactUs from "../components/ContactUs"
import Navbar from "../components/Navbar"
import HeroSection from "../components/HeroSection"
import PainPoints from "../components/PainPoints"
import Features from "../components/Features"
import HowItWorks from "../components/HowItWorks"
import Safety from "../components/Safety"
import Guarantees from "../components/Guarantees"
import CTA from "../components/CTA"
import Footer from "../components/Footer"
import dynamic from 'next/dynamic'
const CityIndex = dynamic(() => import('../components/CityIndex'), { ssr: false })

export default function LandingPage({ setIsOpen, isOpen }: { setIsOpen: (open: boolean) => void; isOpen: boolean }) {
  useEffect(() => {
    AOS.init({ duration: 800 })
  }, [])

  return (
    <div className="bg-[#FDFBF7] text-gray-900 overflow-x-hidden">
      <Head>
        <title>MyRoomie • Find Verified Roommates in 30+ U.S. Cities</title>
        <meta name="description" content="Discover and connect with verified roommates across New York, Los Angeles, Chicago, and 27 more U.S. metros on MyRoomie." />
      </Head>

      {isOpen && <ContactUs onClose={() => setIsOpen(false)} />}
      <Navbar setIsOpen={setIsOpen} />

      <HeroSection city={null} />
      <PainPoints city={null} />
      <Features city={null} />
      <HowItWorks city={null} />
      <Safety city={null} />
      <Guarantees/>
      <CTA city={null} />

      <section className="py-20 bg-gradient-to-br from-[#E4DDD2] to-[#D6CFC4]">
        <div className="max-w-7xl mx-auto px-6">
          <h2 className="text-4xl font-extrabold mb-10 text-center text-gray-800">
            Explore Roommates by City
          </h2>
          <Suspense fallback={<div className="text-center py-12">Loading cities…</div>}>
            <CityIndex />
          </Suspense>
        </div>
      </section>

      <Footer setIsOpen={setIsOpen} />
    </div>
  )
}
'use client';

import React, { useState } from 'react';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import ContactUs from '@/components/ContactUs';

export default function CityClientShell({ children }: { children: React.ReactNode }) {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <>
      {isOpen && <ContactUs onClose={() => setIsOpen(false)} />}
      <Navbar setIsOpen={setIsOpen} />
      {children}
      <Footer setIsOpen={setIsOpen} />
    </>
  );
}
import React from 'react';
import { MapPin } from 'lucide-react';
import CityClientShell from './CityClientShell';

const cityData: Record<string, { title?: string; description?: string }> = {
  'huntsville-al': {
    title: 'Find Roommates in Huntsville, AL • MyRoomie',
    description: 'Looking for a roommate in Huntsville, AL? Be the first to hear when matches go live.',
  },
};

export async function generateStaticParams() {
  return Object.keys(cityData).map((city) => ({ city }));
}


export async function generateMetadata({ params }: { params: { city: string } }) {
  const slug = params.city;
  const pretty = formatCityName(slug);
  const meta = cityData[slug];

  return {
    title: meta?.title || `Find Roommates in ${pretty} • MyRoomie`,
    description: meta?.description || `Looking for roommates in ${pretty}? Join MyRoomie to connect with compatible matches.`,
  };
}

function formatCityName(slug: string) {
  const parts = slug.split('-');
  return parts
    .map((w, i) => (i === parts.length - 1 && w.length === 2 ? w.toUpperCase() : capitalize(w)))
    .join(' ');
}

function capitalize(str: string) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

export default function CityPage({ params }: { params: { city: string } }) {
  const pretty = formatCityName(params.city);
  const meta = cityData[params.city];
  const description =
    meta?.description || `Looking for roommates in ${pretty}? Join MyRoomie to connect with compatible matches.`;

  return (
    <CityClientShell>
      <main className="bg-[#FDFBF7] text-gray-900 pt-24 pb-16">
        <div className="max-w-4xl mx-auto px-4">
          <h1 className="text-4xl font-bold mb-4 text-center">Find Roommates in {pretty}</h1>
          <p className="text-center text-lg text-gray-700 mb-8">{description}</p>

          <div className="text-center mb-12">
            <a
              href="https://forms.gle/qJQXtqEgHb45Y2Y8A"
              target="_blank"
              rel="noopener noreferrer"
              className="inline-block bg-black text-white px-6 py-3 rounded-2xl font-semibold hover:bg-gray-800 transition"
            >
              Become a Beta Tester
            </a>
          </div>

          <section id="map" className="mb-16">
            <h2 className="text-2xl font-semibold mb-4">Explore {pretty}</h2>
            <div className="scroll-mt-28 relative max-w-4xl mx-auto">
              <div className="bg-gradient-to-r from-blue-500/20 via-purple-500/20 to-pink-500/20 rounded-3xl p-8 backdrop-blur-sm border border-white/20 shadow-2xl">
                <div className="bg-white/80 backdrop-blur rounded-2xl p-6 shadow-lg">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex space-x-2">
                      <div className="w-3 h-3 bg-red-500 rounded-full" />
                      <div className="w-3 h-3 bg-yellow-500 rounded-full" />
                      <div className="w-3 h-3 bg-green-500 rounded-full" />
                    </div>
                    <span className="text-sm text-gray-500">MyRoomie Map Demo</span>
                  </div>
                  <div className="h-64 bg-gradient-to-br from-blue-100 via-purple-50 to-pink-100 rounded-xl flex items-center justify-center">
                    <div className="text-center">
                      <MapPin className="w-16 h-16 mx-auto mb-4 text-blue-600" />
                      <p className="text-gray-600 font-medium">Interactive map demo coming soon</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </div>
      </main>
    </CityClientShell>
  );
}
